class VerificationService {
  constructor() {
    this.apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:3001';
  }

  async createLivenessSession() {
    try {
      console.log('üîÑ Creando sesi√≥n AWS Rekognition...');
      const response = await fetch(`${this.apiUrl}/api/create-liveness-session`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('‚úÖ Sesi√≥n creada en backend:', data);
      return data;
    } catch (error) {
      console.error('‚ùå Error creando sesi√≥n:', error);
      throw error;
    }
  }

  // Funci√≥n auxiliar para crear delay
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  // M√©todo mejorado para verificar reference image status con debugging
  async checkReferenceImageStatus(sessionId) {
    try {
      console.log('üîç === DEBUGGING REFERENCE IMAGE STATUS ===');
      console.log('üîç Session ID:', sessionId);
      console.log('üîç URL completa:', `${this.apiUrl}/api/check-reference-image/${sessionId}`);
      
      const response = await fetch(`${this.apiUrl}/api/check-reference-image/${sessionId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      console.log('üì• Status de respuesta:', response.status);
      console.log('üì• Headers de respuesta:', response.headers);

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Datos recibidos del backend:', data);
        return data.referenceImageAvailable;
      } else {
        const errorText = await response.text();
        console.error('‚ùå Error response:', errorText);
        return false;
      }
      
    } catch (error) {
      console.error('‚ùå Error checking reference image status:', error);
      return false;
    }
  }

  // Versi√≥n simplificada sin polling complicado
  async compareWithDocumentSimple(documentImage, sessionId) {
    try {
      console.log('üîÑ === COMPARACI√ìN SIMPLE CON DELAYS GRADUALES ===');
      console.log('üîÑ Documento:', documentImage ? {
        name: documentImage.name,
        size: documentImage.size,
        type: documentImage.type
      } : 'NULL');
      console.log('üîÑ Session ID:', sessionId);

      if (!documentImage) {
        throw new Error('Imagen del documento requerida');
      }

      if (!sessionId) {
        throw new Error('Session ID requerido');
      }

      const formData = new FormData();
      formData.append('documentImage', documentImage);
      formData.append('sessionId', sessionId);

      // Intentar comparaci√≥n con delays crecientes
      const delays = [2000, 4000, 6000, 8000, 10000]; // 2, 4, 6, 8, 10 segundos
      
      for (let i = 0; i < delays.length; i++) {
        const currentDelay = delays[i];
        console.log(`‚è≥ Intento ${i + 1}/${delays.length} - Esperando ${currentDelay}ms...`);
        
        await this.delay(currentDelay);
        
        try {
          console.log(`üì§ Enviando al backend (intento ${i + 1})...`);

          const response = await fetch(`${this.apiUrl}/api/compare-identity`, {
            method: 'POST',
            body: formData,
          });

          console.log(`üì• Respuesta recibida:`, response.status, response.statusText);

          if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ Comparaci√≥n exitosa:', data);
            return data;
          }

          // Si no es OK, intentar parsear el error
          const errorData = await response.json().catch(() => ({ error: 'Error desconocido' }));
          
          console.log('‚ùå Error del backend:', errorData);

          // Si es reference image no disponible, continuar con el siguiente delay
          if (errorData.code === 'REFERENCE_IMAGE_NOT_AVAILABLE' && i < delays.length - 1) {
            console.log(`‚è≥ Reference image a√∫n no disponible. Continuando con delay m√°s largo...`);
            continue;
          }

          // Si no es retryable o es el √∫ltimo intento, lanzar error
          const error = new Error(errorData.error || `HTTP error! status: ${response.status}`);
          error.code = errorData.code;
          error.retryable = errorData.retryable || false;
          error.details = errorData.details;
          throw error;

        } catch (fetchError) {
          // Si es el √∫ltimo intento, lanzar el error
          if (i === delays.length - 1) {
            throw fetchError;
          }
          
          console.log(`üåê Error en intento ${i + 1}, continuando...`, fetchError.message);
        }
      }

    } catch (error) {
      console.error('‚ùå Error en comparaci√≥n simple:', error);
      throw error;
    }
  }

  // M√©todo con debugging paso a paso para usar en lugar del polling
  async compareWithDocumentDebug(documentImage, sessionId) {
    try {
      console.log('üêõ === MODO DEBUG COMPLETO ===');
      
      // Paso 1: Verificar estado inmediatamente
      console.log('üêõ Paso 1: Verificando estado inmediatamente...');
      let isReady = await this.checkReferenceImageStatus(sessionId);
      console.log('üêõ Reference image lista inmediatamente?', isReady);
      
      if (isReady) {
        console.log('üêõ ¬°La reference image ya est√° lista! Procediendo directamente...');
        return await this.makeDirectComparison(documentImage, sessionId);
      }

      // Paso 2: Esperar un poco y verificar de nuevo
      console.log('üêõ Paso 2: Esperando 3 segundos y verificando de nuevo...');
      await this.delay(3000);
      isReady = await this.checkReferenceImageStatus(sessionId);
      console.log('üêõ Reference image lista despu√©s de 3s?', isReady);
      
      if (isReady) {
        console.log('üêõ Reference image lista despu√©s de 3s! Procediendo...');
        return await this.makeDirectComparison(documentImage, sessionId);
      }

      // Paso 3: Intentar comparaci√≥n directa aunque no est√© "lista"
      console.log('üêõ Paso 3: Status dice que no est√° lista, pero intentando comparaci√≥n directa...');
      return await this.makeDirectComparison(documentImage, sessionId);

    } catch (error) {
      console.error('üêõ Error en debug mode:', error);
      throw error;
    }
  }

  // M√©todo auxiliar para hacer la comparaci√≥n directa
  async makeDirectComparison(documentImage, sessionId) {
    try {
      console.log('üîÑ Haciendo comparaci√≥n directa...');
      
      const formData = new FormData();
      formData.append('documentImage', documentImage);
      formData.append('sessionId', sessionId);

      const response = await fetch(`${this.apiUrl}/api/compare-identity`, {
        method: 'POST',
        body: formData,
      });

      console.log(`üì• Respuesta de comparaci√≥n directa:`, response.status);

      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ Comparaci√≥n directa exitosa:', data);
        return data;
      }

      const errorData = await response.json().catch(() => ({ error: 'Error desconocido' }));
      console.log('‚ùå Error en comparaci√≥n directa:', errorData);
      
      const error = new Error(errorData.error || `HTTP error! status: ${response.status}`);
      error.code = errorData.code;
      error.retryable = errorData.retryable || false;
      throw error;

    } catch (error) {
      console.error('‚ùå Error haciendo comparaci√≥n directa:', error);
      throw error;
    }
  }

  // Mantener el m√©todo original para backward compatibility
  async compareWithDocument(documentImage, sessionId, options = {}) {
    // Usar la versi√≥n simple por defecto
    return await this.compareWithDocumentSimple(documentImage, sessionId);
  }

  // M√©todo nuevo que permite elegir el modo de debugging
  async compareWithDocumentSmart(documentImage, sessionId) {
    // Usar el modo debug para obtener m√°s informaci√≥n
    return await this.compareWithDocumentDebug(documentImage, sessionId);
  }
}

export const verificationService = new VerificationService();
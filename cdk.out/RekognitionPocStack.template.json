{
 "Resources": {
  "DocumentsBucket9EC9DEB9": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "BucketName": {
     "Fn::Join": [
      "",
      [
       "rekog-poc-documents-",
       {
        "Ref": "AWS::AccountId"
       }
      ]
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/DocumentsBucket/Resource"
   }
  },
  "UserPhotosBucket4D5DE39B": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "BucketName": {
     "Fn::Join": [
      "",
      [
       "rekog-poc-user-photos-",
       {
        "Ref": "AWS::AccountId"
       }
      ]
     ]
    },
    "CorsConfiguration": {
     "CorsRules": [
      {
       "AllowedHeaders": [
        "*"
       ],
       "AllowedMethods": [
        "POST",
        "PUT"
       ],
       "AllowedOrigins": [
        "*"
       ],
       "MaxAge": 3000
      }
     ]
    },
    "LifecycleConfiguration": {
     "Rules": [
      {
       "ExpirationInDays": 120,
       "Id": "user_photos_cleanup",
       "Status": "Enabled",
       "Transitions": [
        {
         "StorageClass": "GLACIER_IR",
         "TransitionInDays": 30
        }
       ]
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/UserPhotosBucket/Resource"
   }
  },
  "UserPhotosBucketNotificationsFFC4FB93": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "UserPhotosBucket4D5DE39B"
    },
    "NotificationConfiguration": {
     "LambdaFunctionConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".jpg"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "UserValidatorF49AEC8F",
         "Arn"
        ]
       }
      },
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".jpeg"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "UserValidatorF49AEC8F",
         "Arn"
        ]
       }
      },
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".png"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "UserValidatorF49AEC8F",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true
   },
   "DependsOn": [
    "UserPhotosBucketAllowBucketNotificationsToRekognitionPocStackUserValidator857841D06B1F3FD3"
   ],
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/UserPhotosBucket/Notifications/Resource"
   }
  },
  "UserPhotosBucketAllowBucketNotificationsToRekognitionPocStackUserValidator857841D06B1F3FD3": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "UserValidatorF49AEC8F",
      "Arn"
     ]
    },
    "Principal": "s3.amazonaws.com",
    "SourceAccount": {
     "Ref": "AWS::AccountId"
    },
    "SourceArn": {
     "Fn::GetAtt": [
      "UserPhotosBucket4D5DE39B",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/UserPhotosBucket/AllowBucketNotificationsToRekognitionPocStackUserValidator857841D0"
   }
  },
  "IndexedDocumentsTable2C59B6EB": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "document_id",
      "AttributeType": "S"
     },
     {
      "AttributeName": "face_id",
      "AttributeType": "S"
     },
     {
      "AttributeName": "person_name",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "GlobalSecondaryIndexes": [
     {
      "IndexName": "face-id-index",
      "KeySchema": [
       {
        "AttributeName": "face_id",
        "KeyType": "HASH"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     },
     {
      "IndexName": "person-name-index",
      "KeySchema": [
       {
        "AttributeName": "person_name",
        "KeyType": "HASH"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "document_id",
      "KeyType": "HASH"
     }
    ],
    "TableName": "rekognition-indexed-documents"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/IndexedDocumentsTable/Resource"
   }
  },
  "ComparisonResultsTable188C61C4": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "comparison_id",
      "AttributeType": "S"
     },
     {
      "AttributeName": "timestamp",
      "AttributeType": "S"
     },
     {
      "AttributeName": "user_image_key",
      "AttributeType": "S"
     },
     {
      "AttributeName": "matched_face_id",
      "AttributeType": "S"
     },
     {
      "AttributeName": "confidence_score",
      "AttributeType": "N"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "GlobalSecondaryIndexes": [
     {
      "IndexName": "user-image-index",
      "KeySchema": [
       {
        "AttributeName": "user_image_key",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "timestamp",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     },
     {
      "IndexName": "face-id-index",
      "KeySchema": [
       {
        "AttributeName": "matched_face_id",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "confidence_score",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "comparison_id",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "timestamp",
      "KeyType": "RANGE"
     }
    ],
    "TableName": "rekognition-comparison-results",
    "TimeToLiveSpecification": {
     "AttributeName": "ttl",
     "Enabled": true
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/ComparisonResultsTable/Resource"
   }
  },
  "SharedLayer27DFABF0": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "CompatibleRuntimes": [
     "python3.11"
    ],
    "Content": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-us-east-1"
     },
     "S3Key": "8265c6709726f5c67017b75ba2ab54b4f5e738445317f58859b524b7622ac7ec.zip"
    },
    "Description": "Shared utilities with auto-compiled dependencies",
    "LayerName": "rekognition-poc-shared-layer"
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/SharedLayer/Resource",
    "aws:asset:path": "asset.8265c6709726f5c67017b75ba2ab54b4f5e738445317f58859b524b7622ac7ec",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Content"
   }
  },
  "IndexerLambdaRole34F05CC2": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "rekognition:CreateCollection",
          "rekognition:DeleteFaces",
          "rekognition:DescribeCollection",
          "rekognition:DetectFaces",
          "rekognition:IndexFaces"
         ],
         "Effect": "Allow",
         "Resource": "*"
        },
        {
         "Action": "s3:ListBucket",
         "Effect": "Allow",
         "Resource": {
          "Fn::GetAtt": [
           "DocumentsBucket9EC9DEB9",
           "Arn"
          ]
         }
        },
        {
         "Action": "s3:GetObject",
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            {
             "Fn::GetAtt": [
              "DocumentsBucket9EC9DEB9",
              "Arn"
             ]
            },
            "/*"
           ]
          ]
         }
        },
        {
         "Action": [
          "dynamodb:GetItem",
          "dynamodb:PutItem",
          "dynamodb:Scan",
          "dynamodb:UpdateItem"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::GetAtt": [
           "IndexedDocumentsTable2C59B6EB",
           "Arn"
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "RekognitionIndexerPolicy"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/IndexerLambdaRole/Resource"
   }
  },
  "ValidatorLambdaRoleD4191E2F": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "rekognition:CompareFaces",
          "rekognition:DetectFaces",
          "rekognition:SearchFacesByImage"
         ],
         "Effect": "Allow",
         "Resource": "*"
        },
        {
         "Action": "s3:ListBucket",
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::GetAtt": [
            "DocumentsBucket9EC9DEB9",
            "Arn"
           ]
          },
          {
           "Fn::GetAtt": [
            "UserPhotosBucket4D5DE39B",
            "Arn"
           ]
          }
         ]
        },
        {
         "Action": "s3:GetObject",
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             {
              "Fn::GetAtt": [
               "DocumentsBucket9EC9DEB9",
               "Arn"
              ]
             },
             "/*"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             {
              "Fn::GetAtt": [
               "UserPhotosBucket4D5DE39B",
               "Arn"
              ]
             },
             "/*"
            ]
           ]
          }
         ]
        },
        {
         "Action": [
          "dynamodb:GetItem",
          "dynamodb:PutItem",
          "dynamodb:Query"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::GetAtt": [
            "ComparisonResultsTable188C61C4",
            "Arn"
           ]
          },
          {
           "Fn::GetAtt": [
            "IndexedDocumentsTable2C59B6EB",
            "Arn"
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             {
              "Fn::GetAtt": [
               "ComparisonResultsTable188C61C4",
               "Arn"
              ]
             },
             "/index/*"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             {
              "Fn::GetAtt": [
               "IndexedDocumentsTable2C59B6EB",
               "Arn"
              ]
             },
             "/index/*"
            ]
           ]
          }
         ]
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "RekognitionValidatorPolicy"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/ValidatorLambdaRole/Resource"
   }
  },
  "DocumentIndexer7C68C1D7": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-us-east-1"
     },
     "S3Key": "ff181d1d59be2e7ef696a2e7dff3f2f8fde3c6e0124d489f6f11e9446b160c5d.zip"
    },
    "Environment": {
     "Variables": {
      "COLLECTION_ID": "document-faces-collection",
      "INDEXED_DOCUMENTS_TABLE": {
       "Ref": "IndexedDocumentsTable2C59B6EB"
      },
      "DOCUMENTS_BUCKET": {
       "Ref": "DocumentsBucket9EC9DEB9"
      }
     }
    },
    "FunctionName": "rekognition-poc-document-indexer",
    "Handler": "handler.lambda_handler",
    "Layers": [
     {
      "Ref": "SharedLayer27DFABF0"
     }
    ],
    "MemorySize": 1024,
    "Role": {
     "Fn::GetAtt": [
      "IndexerLambdaRole34F05CC2",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300
   },
   "DependsOn": [
    "IndexerLambdaRole34F05CC2"
   ],
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/DocumentIndexer/Resource",
    "aws:asset:path": "asset.ff181d1d59be2e7ef696a2e7dff3f2f8fde3c6e0124d489f6f11e9446b160c5d",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "DocumentIndexerAllowAPIGatewayIndexerEEED4E50": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "DocumentIndexer7C68C1D7",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com"
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/DocumentIndexer/AllowAPIGatewayIndexer"
   }
  },
  "UserValidatorF49AEC8F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-us-east-1"
     },
     "S3Key": "2a4e2faee23ff366331b3242ddad1cf5f42cbf7bc17360cd89d943531b36c803.zip"
    },
    "Environment": {
     "Variables": {
      "COLLECTION_ID": "document-faces-collection",
      "COMPARISON_RESULTS_TABLE": {
       "Ref": "ComparisonResultsTable188C61C4"
      },
      "INDEXED_DOCUMENTS_TABLE": {
       "Ref": "IndexedDocumentsTable2C59B6EB"
      },
      "DOCUMENTS_BUCKET": {
       "Ref": "DocumentsBucket9EC9DEB9"
      },
      "USER_PHOTOS_BUCKET": {
       "Ref": "UserPhotosBucket4D5DE39B"
      }
     }
    },
    "FunctionName": "rekognition-poc-user-validator",
    "Handler": "handler.lambda_handler",
    "Layers": [
     {
      "Ref": "SharedLayer27DFABF0"
     }
    ],
    "MemorySize": 512,
    "Role": {
     "Fn::GetAtt": [
      "ValidatorLambdaRoleD4191E2F",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 30
   },
   "DependsOn": [
    "ValidatorLambdaRoleD4191E2F"
   ],
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/UserValidator/Resource",
    "aws:asset:path": "asset.2a4e2faee23ff366331b3242ddad1cf5f42cbf7bc17360cd89d943531b36c803",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "UserValidatorAllowAPIGateway26C2187C": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "UserValidatorF49AEC8F",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com"
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/UserValidator/AllowAPIGateway"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def with_id(n):\n    n['Id'] = f\"{stack_id}-{hash(json.dumps(n, sort_keys=True))}\"\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        ids = [with_id(n) for n in old.get(t, [])]\n        old_incoming_ids = [n['Id'] for n in ids]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'] in old_incoming_ids]\n    elif request_type == 'Delete':\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "WebInterfaceBucket3A7ACE14": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": {
     "Fn::Join": [
      "",
      [
       "rekog-poc-web-",
       {
        "Ref": "AWS::AccountId"
       }
      ]
     ]
    },
    "CorsConfiguration": {
     "CorsRules": [
      {
       "AllowedHeaders": [
        "*"
       ],
       "AllowedMethods": [
        "GET",
        "HEAD"
       ],
       "AllowedOrigins": [
        "*"
       ],
       "MaxAge": 3000
      }
     ]
    },
    "WebsiteConfiguration": {
     "IndexDocument": "index.html"
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/WebInterfaceBucket/Resource"
   }
  },
  "WebInterfaceBucketPolicyC9E7B197": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "WebInterfaceBucket3A7ACE14"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:GetBucket*",
        "s3:GetObject*",
        "s3:List*"
       ],
       "Effect": "Allow",
       "Principal": {
        "CanonicalUser": {
         "Fn::GetAtt": [
          "WebOAI6A7C4516",
          "S3CanonicalUserId"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "WebInterfaceBucket3A7ACE14",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "WebInterfaceBucket3A7ACE14",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/WebInterfaceBucket/Policy/Resource"
   }
  },
  "WebOAI6A7C4516": {
   "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
   "Properties": {
    "CloudFrontOriginAccessIdentityConfig": {
     "Comment": "OAI for Rekognition Web Interface"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/WebOAI/Resource"
   }
  },
  "WebDistribution59C46482": {
   "Type": "AWS::CloudFront::Distribution",
   "Properties": {
    "DistributionConfig": {
     "CustomErrorResponses": [
      {
       "ErrorCode": 404,
       "ResponseCode": 200,
       "ResponsePagePath": "/index.html"
      }
     ],
     "DefaultCacheBehavior": {
      "AllowedMethods": [
       "GET",
       "HEAD"
      ],
      "CachePolicyId": "658327ea-f89d-4fab-a63d-7e88639e58f6",
      "Compress": true,
      "TargetOriginId": "RekognitionPocStackWebDistributionOrigin116376100",
      "ViewerProtocolPolicy": "redirect-to-https"
     },
     "DefaultRootObject": "index.html",
     "Enabled": true,
     "HttpVersion": "http2",
     "IPV6Enabled": true,
     "Origins": [
      {
       "CustomOriginConfig": {
        "OriginProtocolPolicy": "http-only",
        "OriginSSLProtocols": [
         "TLSv1.2"
        ]
       },
       "DomainName": {
        "Fn::Select": [
         2,
         {
          "Fn::Split": [
           "/",
           {
            "Fn::GetAtt": [
             "WebInterfaceBucket3A7ACE14",
             "WebsiteURL"
            ]
           }
          ]
         }
        ]
       },
       "Id": "RekognitionPocStackWebDistributionOrigin116376100"
      }
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/WebDistribution/Resource"
   }
  },
  "RekognitionWebAPI5D87F7AA": {
   "Type": "AWS::ApiGateway::RestApi",
   "Properties": {
    "Description": "Web interface for Rekognition POC",
    "Name": "rekognition-poc-web-api"
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Resource"
   }
  },
  "RekognitionWebAPIDeployment1998A47329bed7154d0b7f5e5344d4910397eebc": {
   "Type": "AWS::ApiGateway::Deployment",
   "Properties": {
    "Description": "Web interface for Rekognition POC",
    "RestApiId": {
     "Ref": "RekognitionWebAPI5D87F7AA"
    }
   },
   "DependsOn": [
    "RekognitionWebAPIdocumentsindexOPTIONS816B0493",
    "RekognitionWebAPIdocumentsindexPOSTF09F5D09",
    "RekognitionWebAPIdocumentsindex2E8B1CE4",
    "RekognitionWebAPIdocumentsOPTIONS13EBA808",
    "RekognitionWebAPIdocumentsAC146502",
    "RekognitionWebAPIOPTIONSDADEFD27",
    "RekognitionWebAPIuserslookupOPTIONSCDA766DC",
    "RekognitionWebAPIuserslookupPOST15E4159A",
    "RekognitionWebAPIuserslookup3D7FD623",
    "RekognitionWebAPIusersOPTIONSC5BC8BB3",
    "RekognitionWebAPIusers69F2C1E2",
    "RekognitionWebAPIusersvalidateOPTIONSDCE66F81",
    "RekognitionWebAPIusersvalidatePOST6968FEE1",
    "RekognitionWebAPIusersvalidateF905F283"
   ],
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Deployment/Resource"
   }
  },
  "RekognitionWebAPIDeploymentStageprod2613A38B": {
   "Type": "AWS::ApiGateway::Stage",
   "Properties": {
    "DeploymentId": {
     "Ref": "RekognitionWebAPIDeployment1998A47329bed7154d0b7f5e5344d4910397eebc"
    },
    "RestApiId": {
     "Ref": "RekognitionWebAPI5D87F7AA"
    },
    "StageName": "prod"
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/DeploymentStage.prod/Resource"
   }
  },
  "RekognitionWebAPIOPTIONSDADEFD27": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Fn::GetAtt": [
      "RekognitionWebAPI5D87F7AA",
      "RootResourceId"
     ]
    },
    "RestApiId": {
     "Ref": "RekognitionWebAPI5D87F7AA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/OPTIONS/Resource"
   }
  },
  "RekognitionWebAPIusers69F2C1E2": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "RekognitionWebAPI5D87F7AA",
      "RootResourceId"
     ]
    },
    "PathPart": "users",
    "RestApiId": {
     "Ref": "RekognitionWebAPI5D87F7AA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/users/Resource"
   }
  },
  "RekognitionWebAPIusersOPTIONSC5BC8BB3": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "RekognitionWebAPIusers69F2C1E2"
    },
    "RestApiId": {
     "Ref": "RekognitionWebAPI5D87F7AA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/users/OPTIONS/Resource"
   }
  },
  "RekognitionWebAPIuserslookup3D7FD623": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Ref": "RekognitionWebAPIusers69F2C1E2"
    },
    "PathPart": "lookup",
    "RestApiId": {
     "Ref": "RekognitionWebAPI5D87F7AA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/users/lookup/Resource"
   }
  },
  "RekognitionWebAPIuserslookupOPTIONSCDA766DC": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "RekognitionWebAPIuserslookup3D7FD623"
    },
    "RestApiId": {
     "Ref": "RekognitionWebAPI5D87F7AA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/users/lookup/OPTIONS/Resource"
   }
  },
  "RekognitionWebAPIuserslookupPOSTApiPermissionRekognitionPocStackRekognitionWebAPI333A1347POSTuserslookupB51FC41B": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "UserValidatorF49AEC8F",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-1:",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "RekognitionWebAPI5D87F7AA"
       },
       "/",
       {
        "Ref": "RekognitionWebAPIDeploymentStageprod2613A38B"
       },
       "/POST/users/lookup"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/users/lookup/POST/ApiPermission.RekognitionPocStackRekognitionWebAPI333A1347.POST..users.lookup"
   }
  },
  "RekognitionWebAPIuserslookupPOSTApiPermissionTestRekognitionPocStackRekognitionWebAPI333A1347POSTuserslookup8E705B9F": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "UserValidatorF49AEC8F",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-1:",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "RekognitionWebAPI5D87F7AA"
       },
       "/test-invoke-stage/POST/users/lookup"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/users/lookup/POST/ApiPermission.Test.RekognitionPocStackRekognitionWebAPI333A1347.POST..users.lookup"
   }
  },
  "RekognitionWebAPIuserslookupPOST15E4159A": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "POST",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "UserValidatorF49AEC8F",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "RekognitionWebAPIuserslookup3D7FD623"
    },
    "RestApiId": {
     "Ref": "RekognitionWebAPI5D87F7AA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/users/lookup/POST/Resource"
   }
  },
  "RekognitionWebAPIusersvalidateF905F283": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Ref": "RekognitionWebAPIusers69F2C1E2"
    },
    "PathPart": "validate",
    "RestApiId": {
     "Ref": "RekognitionWebAPI5D87F7AA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/users/validate/Resource"
   }
  },
  "RekognitionWebAPIusersvalidateOPTIONSDCE66F81": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "RekognitionWebAPIusersvalidateF905F283"
    },
    "RestApiId": {
     "Ref": "RekognitionWebAPI5D87F7AA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/users/validate/OPTIONS/Resource"
   }
  },
  "RekognitionWebAPIusersvalidatePOSTApiPermissionRekognitionPocStackRekognitionWebAPI333A1347POSTusersvalidate45087E3D": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "UserValidatorF49AEC8F",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-1:",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "RekognitionWebAPI5D87F7AA"
       },
       "/",
       {
        "Ref": "RekognitionWebAPIDeploymentStageprod2613A38B"
       },
       "/POST/users/validate"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/users/validate/POST/ApiPermission.RekognitionPocStackRekognitionWebAPI333A1347.POST..users.validate"
   }
  },
  "RekognitionWebAPIusersvalidatePOSTApiPermissionTestRekognitionPocStackRekognitionWebAPI333A1347POSTusersvalidate0D045F12": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "UserValidatorF49AEC8F",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-1:",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "RekognitionWebAPI5D87F7AA"
       },
       "/test-invoke-stage/POST/users/validate"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/users/validate/POST/ApiPermission.Test.RekognitionPocStackRekognitionWebAPI333A1347.POST..users.validate"
   }
  },
  "RekognitionWebAPIusersvalidatePOST6968FEE1": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "POST",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "UserValidatorF49AEC8F",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "RekognitionWebAPIusersvalidateF905F283"
    },
    "RestApiId": {
     "Ref": "RekognitionWebAPI5D87F7AA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/users/validate/POST/Resource"
   }
  },
  "RekognitionWebAPIdocumentsAC146502": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Fn::GetAtt": [
      "RekognitionWebAPI5D87F7AA",
      "RootResourceId"
     ]
    },
    "PathPart": "documents",
    "RestApiId": {
     "Ref": "RekognitionWebAPI5D87F7AA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/documents/Resource"
   }
  },
  "RekognitionWebAPIdocumentsOPTIONS13EBA808": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "RekognitionWebAPIdocumentsAC146502"
    },
    "RestApiId": {
     "Ref": "RekognitionWebAPI5D87F7AA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/documents/OPTIONS/Resource"
   }
  },
  "RekognitionWebAPIdocumentsindex2E8B1CE4": {
   "Type": "AWS::ApiGateway::Resource",
   "Properties": {
    "ParentId": {
     "Ref": "RekognitionWebAPIdocumentsAC146502"
    },
    "PathPart": "index",
    "RestApiId": {
     "Ref": "RekognitionWebAPI5D87F7AA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/documents/index/Resource"
   }
  },
  "RekognitionWebAPIdocumentsindexOPTIONS816B0493": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "ApiKeyRequired": false,
    "AuthorizationType": "NONE",
    "HttpMethod": "OPTIONS",
    "Integration": {
     "IntegrationResponses": [
      {
       "ResponseParameters": {
        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,Authorization'",
        "method.response.header.Access-Control-Allow-Origin": "'*'",
        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
       },
       "StatusCode": "204"
      }
     ],
     "RequestTemplates": {
      "application/json": "{ statusCode: 200 }"
     },
     "Type": "MOCK"
    },
    "MethodResponses": [
     {
      "ResponseParameters": {
       "method.response.header.Access-Control-Allow-Headers": true,
       "method.response.header.Access-Control-Allow-Origin": true,
       "method.response.header.Access-Control-Allow-Methods": true
      },
      "StatusCode": "204"
     }
    ],
    "ResourceId": {
     "Ref": "RekognitionWebAPIdocumentsindex2E8B1CE4"
    },
    "RestApiId": {
     "Ref": "RekognitionWebAPI5D87F7AA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/documents/index/OPTIONS/Resource"
   }
  },
  "RekognitionWebAPIdocumentsindexPOSTApiPermissionRekognitionPocStackRekognitionWebAPI333A1347POSTdocumentsindexB4F91F02": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "DocumentIndexer7C68C1D7",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-1:",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "RekognitionWebAPI5D87F7AA"
       },
       "/",
       {
        "Ref": "RekognitionWebAPIDeploymentStageprod2613A38B"
       },
       "/POST/documents/index"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/documents/index/POST/ApiPermission.RekognitionPocStackRekognitionWebAPI333A1347.POST..documents.index"
   }
  },
  "RekognitionWebAPIdocumentsindexPOSTApiPermissionTestRekognitionPocStackRekognitionWebAPI333A1347POSTdocumentsindexA257C812": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "DocumentIndexer7C68C1D7",
      "Arn"
     ]
    },
    "Principal": "apigateway.amazonaws.com",
    "SourceArn": {
     "Fn::Join": [
      "",
      [
       "arn:aws:execute-api:us-east-1:",
       {
        "Ref": "AWS::AccountId"
       },
       ":",
       {
        "Ref": "RekognitionWebAPI5D87F7AA"
       },
       "/test-invoke-stage/POST/documents/index"
      ]
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/documents/index/POST/ApiPermission.Test.RekognitionPocStackRekognitionWebAPI333A1347.POST..documents.index"
   }
  },
  "RekognitionWebAPIdocumentsindexPOSTF09F5D09": {
   "Type": "AWS::ApiGateway::Method",
   "Properties": {
    "AuthorizationType": "NONE",
    "HttpMethod": "POST",
    "Integration": {
     "IntegrationHttpMethod": "POST",
     "Type": "AWS_PROXY",
     "Uri": {
      "Fn::Join": [
       "",
       [
        "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/",
        {
         "Fn::GetAtt": [
          "DocumentIndexer7C68C1D7",
          "Arn"
         ]
        },
        "/invocations"
       ]
      ]
     }
    },
    "ResourceId": {
     "Ref": "RekognitionWebAPIdocumentsindex2E8B1CE4"
    },
    "RestApiId": {
     "Ref": "RekognitionWebAPI5D87F7AA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/RekognitionWebAPI/Default/documents/index/POST/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/22QUWvCQBCEf4vv59Vo/4BGBKFFiaWvcrls4tbkLtzuIeHIfy+5JGihT/MNMyzDrmXyvpKrhXrQUhf3ZY25DBdW+i7Ug66BNjLsvL4Di7Q0E42yUwQTnm2Nuns2Rt+LWjV5oWRIS3MG1yARWiM+VAfuG1w0aWn++IM3mqdg5l4UnVGNLXIZvlRewxBG6AVtrooImOR2EIGqkSGzYyfqc9w8S9fWF6WzhmU4OazQbLUGomMBhpFjNx06h6Hzb2OPxA5zP0999b1QLVaK4aE6GTIg3rYY50y4h7a2XQMmPvXFXVhVcfgIGZD1TkP89CfwzRZDONGcTpcj9/2re1bib4ajaKqhcfLceu7FueObNW8bmaxlkix+CHHpvGFsQGaj/gLYkL2dIgIAAA=="
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocStack/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "DocumentsBucketName": {
   "Description": "Bucket for identity documents",
   "Value": {
    "Ref": "DocumentsBucket9EC9DEB9"
   }
  },
  "UserPhotosBucketName": {
   "Description": "Bucket for user photos",
   "Value": {
    "Ref": "UserPhotosBucket4D5DE39B"
   }
  },
  "IndexedDocumentsTableName": {
   "Description": "DynamoDB table for indexed documents metadata",
   "Value": {
    "Ref": "IndexedDocumentsTable2C59B6EB"
   }
  },
  "ComparisonResultsTableName": {
   "Description": "DynamoDB table for comparison results",
   "Value": {
    "Ref": "ComparisonResultsTable188C61C4"
   }
  },
  "RekognitionWebAPIEndpointE5C6CD76": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "RekognitionWebAPI5D87F7AA"
      },
      ".execute-api.us-east-1.",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "RekognitionWebAPIDeploymentStageprod2613A38B"
      },
      "/"
     ]
    ]
   }
  },
  "WebBucketName": {
   "Value": {
    "Ref": "WebInterfaceBucket3A7ACE14"
   }
  },
  "APIGatewayURL": {
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Ref": "RekognitionWebAPI5D87F7AA"
      },
      ".execute-api.us-east-1.",
      {
       "Ref": "AWS::URLSuffix"
      },
      "/",
      {
       "Ref": "RekognitionWebAPIDeploymentStageprod2613A38B"
      },
      "/"
     ]
    ]
   }
  },
  "WebInterfaceURL": {
   "Description": "Web interface URL (CloudFront)",
   "Value": {
    "Fn::Join": [
     "",
     [
      "https://",
      {
       "Fn::GetAtt": [
        "WebDistribution59C46482",
        "DomainName"
       ]
      }
     ]
    ]
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}
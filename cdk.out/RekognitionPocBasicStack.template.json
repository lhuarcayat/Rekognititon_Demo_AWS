{
 "Resources": {
  "DocumentsBucketBasic6A70FCE4": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "BucketName": {
     "Fn::Join": [
      "",
      [
       "rekognition-basic-documents-",
       {
        "Ref": "AWS::AccountId"
       },
       "-us-east-1"
      ]
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    },
    "VersioningConfiguration": {
     "Status": "Enabled"
    }
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "RekognitionPocBasicStack/DocumentsBucketBasic/Resource"
   }
  },
  "UserPhotosBucketBasic841BB3B6": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketEncryption": {
     "ServerSideEncryptionConfiguration": [
      {
       "ServerSideEncryptionByDefault": {
        "SSEAlgorithm": "AES256"
       }
      }
     ]
    },
    "BucketName": {
     "Fn::Join": [
      "",
      [
       "rekognition-basic-user-photos-",
       {
        "Ref": "AWS::AccountId"
       },
       "-us-east-1"
      ]
     ]
    },
    "CorsConfiguration": {
     "CorsRules": [
      {
       "AllowedHeaders": [
        "*"
       ],
       "AllowedMethods": [
        "POST",
        "PUT"
       ],
       "AllowedOrigins": [
        "*"
       ],
       "MaxAge": 3000
      }
     ]
    },
    "LifecycleConfiguration": {
     "Rules": [
      {
       "ExpirationInDays": 120,
       "Id": "user_photos_cleanup",
       "Status": "Enabled",
       "Transitions": [
        {
         "StorageClass": "GLACIER_IR",
         "TransitionInDays": 30
        }
       ]
      }
     ]
    },
    "PublicAccessBlockConfiguration": {
     "BlockPublicAcls": true,
     "BlockPublicPolicy": true,
     "IgnorePublicAcls": true,
     "RestrictPublicBuckets": true
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "RekognitionPocBasicStack/UserPhotosBucketBasic/Resource"
   }
  },
  "UserPhotosBucketBasicNotifications7BD95CF2": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "UserPhotosBucketBasic841BB3B6"
    },
    "NotificationConfiguration": {
     "LambdaFunctionConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".jpg"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "UserValidatorBasic6717E317",
         "Arn"
        ]
       }
      },
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".jpeg"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "UserValidatorBasic6717E317",
         "Arn"
        ]
       }
      },
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".png"
          }
         ]
        }
       },
       "LambdaFunctionArn": {
        "Fn::GetAtt": [
         "UserValidatorBasic6717E317",
         "Arn"
        ]
       }
      }
     ]
    },
    "Managed": true
   },
   "DependsOn": [
    "UserPhotosBucketBasicAllowBucketNotificationsToRekognitionPocBasicStackUserValidatorBasicECF05014707902E8"
   ],
   "Metadata": {
    "aws:cdk:path": "RekognitionPocBasicStack/UserPhotosBucketBasic/Notifications/Resource"
   }
  },
  "UserPhotosBucketBasicAllowBucketNotificationsToRekognitionPocBasicStackUserValidatorBasicECF05014707902E8": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "UserValidatorBasic6717E317",
      "Arn"
     ]
    },
    "Principal": "s3.amazonaws.com",
    "SourceAccount": {
     "Ref": "AWS::AccountId"
    },
    "SourceArn": {
     "Fn::GetAtt": [
      "UserPhotosBucketBasic841BB3B6",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocBasicStack/UserPhotosBucketBasic/AllowBucketNotificationsToRekognitionPocBasicStackUserValidatorBasicECF05014"
   }
  },
  "IndexedDocumentsTableBasic38A69D7F": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "document_id",
      "AttributeType": "S"
     },
     {
      "AttributeName": "face_id",
      "AttributeType": "S"
     },
     {
      "AttributeName": "person_name",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "GlobalSecondaryIndexes": [
     {
      "IndexName": "face-id-index",
      "KeySchema": [
       {
        "AttributeName": "face_id",
        "KeyType": "HASH"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     },
     {
      "IndexName": "person-name-index",
      "KeySchema": [
       {
        "AttributeName": "person_name",
        "KeyType": "HASH"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "document_id",
      "KeyType": "HASH"
     }
    ],
    "TableName": "rekognition-basic-indexed-documents"
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "RekognitionPocBasicStack/IndexedDocumentsTableBasic/Resource"
   }
  },
  "ComparisonResultsTableBasic37BC9648": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "comparison_id",
      "AttributeType": "S"
     },
     {
      "AttributeName": "timestamp",
      "AttributeType": "S"
     },
     {
      "AttributeName": "user_image_key",
      "AttributeType": "S"
     },
     {
      "AttributeName": "validation_mode",
      "AttributeType": "S"
     },
     {
      "AttributeName": "confidence_score",
      "AttributeType": "N"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "GlobalSecondaryIndexes": [
     {
      "IndexName": "user-image-index",
      "KeySchema": [
       {
        "AttributeName": "user_image_key",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "timestamp",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     },
     {
      "IndexName": "validation-mode-index",
      "KeySchema": [
       {
        "AttributeName": "validation_mode",
        "KeyType": "HASH"
       },
       {
        "AttributeName": "confidence_score",
        "KeyType": "RANGE"
       }
      ],
      "Projection": {
       "ProjectionType": "ALL"
      }
     }
    ],
    "KeySchema": [
     {
      "AttributeName": "comparison_id",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "timestamp",
      "KeyType": "RANGE"
     }
    ],
    "TableName": "rekognition-basic-comparison-results",
    "TimeToLiveSpecification": {
     "AttributeName": "ttl",
     "Enabled": true
    }
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "RekognitionPocBasicStack/ComparisonResultsTableBasic/Resource"
   }
  },
  "SharedLayer27DFABF0": {
   "Type": "AWS::Lambda::LayerVersion",
   "Properties": {
    "CompatibleRuntimes": [
     "python3.11"
    ],
    "Content": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-us-east-1"
     },
     "S3Key": "d7506998e3d1c895df169d4b1261e599f02e47131ecaf720fed0d26a4e279e88.zip"
    },
    "Description": "Shared utilities with auto-compiled dependencies",
    "LayerName": "rekognition-basic-shared-layer"
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocBasicStack/SharedLayer/Resource",
    "aws:asset:path": "asset.d7506998e3d1c895df169d4b1261e599f02e47131ecaf720fed0d26a4e279e88",
    "aws:asset:is-bundled": true,
    "aws:asset:property": "Content"
   }
  },
  "IndexerLambdaRoleBasic3AEFF255": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "rekognition:CreateCollection",
          "rekognition:DeleteFaces",
          "rekognition:DescribeCollection",
          "rekognition:DetectFaces",
          "rekognition:IndexFaces"
         ],
         "Effect": "Allow",
         "Resource": "*"
        },
        {
         "Action": "s3:ListBucket",
         "Effect": "Allow",
         "Resource": {
          "Fn::GetAtt": [
           "DocumentsBucketBasic6A70FCE4",
           "Arn"
          ]
         }
        },
        {
         "Action": "s3:GetObject",
         "Effect": "Allow",
         "Resource": {
          "Fn::Join": [
           "",
           [
            {
             "Fn::GetAtt": [
              "DocumentsBucketBasic6A70FCE4",
              "Arn"
             ]
            },
            "/*"
           ]
          ]
         }
        },
        {
         "Action": [
          "dynamodb:GetItem",
          "dynamodb:PutItem",
          "dynamodb:Scan",
          "dynamodb:UpdateItem"
         ],
         "Effect": "Allow",
         "Resource": {
          "Fn::GetAtt": [
           "IndexedDocumentsTableBasic38A69D7F",
           "Arn"
          ]
         }
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "RekognitionIndexerBasicPolicy"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocBasicStack/IndexerLambdaRoleBasic/Resource"
   }
  },
  "ValidatorLambdaRoleBasic8ED29FE6": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Policies": [
     {
      "PolicyDocument": {
       "Statement": [
        {
         "Action": [
          "rekognition:CompareFaces",
          "rekognition:DetectFaces",
          "rekognition:SearchFacesByImage"
         ],
         "Effect": "Allow",
         "Resource": "*"
        },
        {
         "Action": "s3:ListBucket",
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::GetAtt": [
            "DocumentsBucketBasic6A70FCE4",
            "Arn"
           ]
          },
          {
           "Fn::GetAtt": [
            "UserPhotosBucketBasic841BB3B6",
            "Arn"
           ]
          }
         ]
        },
        {
         "Action": "s3:GetObject",
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::Join": [
            "",
            [
             {
              "Fn::GetAtt": [
               "DocumentsBucketBasic6A70FCE4",
               "Arn"
              ]
             },
             "/*"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             {
              "Fn::GetAtt": [
               "UserPhotosBucketBasic841BB3B6",
               "Arn"
              ]
             },
             "/*"
            ]
           ]
          }
         ]
        },
        {
         "Action": [
          "dynamodb:GetItem",
          "dynamodb:PutItem",
          "dynamodb:Query",
          "dynamodb:Scan"
         ],
         "Effect": "Allow",
         "Resource": [
          {
           "Fn::GetAtt": [
            "ComparisonResultsTableBasic37BC9648",
            "Arn"
           ]
          },
          {
           "Fn::GetAtt": [
            "IndexedDocumentsTableBasic38A69D7F",
            "Arn"
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             {
              "Fn::GetAtt": [
               "ComparisonResultsTableBasic37BC9648",
               "Arn"
              ]
             },
             "/index/*"
            ]
           ]
          },
          {
           "Fn::Join": [
            "",
            [
             {
              "Fn::GetAtt": [
               "IndexedDocumentsTableBasic38A69D7F",
               "Arn"
              ]
             },
             "/index/*"
            ]
           ]
          }
         ]
        }
       ],
       "Version": "2012-10-17"
      },
      "PolicyName": "RekognitionValidatorBasicPolicy"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocBasicStack/ValidatorLambdaRoleBasic/Resource"
   }
  },
  "DocumentIndexerBasicA04FD227": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-us-east-1"
     },
     "S3Key": "4bd1bad68367caeebcde0dc1673490be07cbb8f451334e2dfd5a4086f9af7e05.zip"
    },
    "Environment": {
     "Variables": {
      "COLLECTION_ID": "document-faces-basic-collection",
      "INDEXED_DOCUMENTS_TABLE": {
       "Ref": "IndexedDocumentsTableBasic38A69D7F"
      },
      "DOCUMENTS_BUCKET": {
       "Ref": "DocumentsBucketBasic6A70FCE4"
      }
     }
    },
    "FunctionName": "rekognition-basic-document-indexer",
    "Handler": "handler.lambda_handler",
    "Layers": [
     {
      "Ref": "SharedLayer27DFABF0"
     }
    ],
    "MemorySize": 1024,
    "Role": {
     "Fn::GetAtt": [
      "IndexerLambdaRoleBasic3AEFF255",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300
   },
   "DependsOn": [
    "IndexerLambdaRoleBasic3AEFF255"
   ],
   "Metadata": {
    "aws:cdk:path": "RekognitionPocBasicStack/DocumentIndexerBasic/Resource",
    "aws:asset:path": "asset.4bd1bad68367caeebcde0dc1673490be07cbb8f451334e2dfd5a4086f9af7e05",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "UserValidatorBasic6717E317": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": {
      "Fn::Sub": "cdk-hnb659fds-assets-${AWS::AccountId}-us-east-1"
     },
     "S3Key": "1aed6bd14f0423ce81c16a78b571bac54f6b6674550f3418a7b34274984e9a67.zip"
    },
    "Environment": {
     "Variables": {
      "COLLECTION_ID": "document-faces-basic-collection",
      "COMPARISON_RESULTS_TABLE": {
       "Ref": "ComparisonResultsTableBasic37BC9648"
      },
      "INDEXED_DOCUMENTS_TABLE": {
       "Ref": "IndexedDocumentsTableBasic38A69D7F"
      },
      "DOCUMENTS_BUCKET": {
       "Ref": "DocumentsBucketBasic6A70FCE4"
      },
      "USER_PHOTOS_BUCKET": {
       "Ref": "UserPhotosBucketBasic841BB3B6"
      },
      "VALIDATION_MODE": "DIRECT_COMPARE",
      "DIRECT_COMPARE_THRESHOLD": "90.0"
     }
    },
    "FunctionName": "rekognition-basic-user-validator",
    "Handler": "handler.lambda_handler",
    "Layers": [
     {
      "Ref": "SharedLayer27DFABF0"
     }
    ],
    "MemorySize": 512,
    "Role": {
     "Fn::GetAtt": [
      "ValidatorLambdaRoleBasic8ED29FE6",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 30
   },
   "DependsOn": [
    "ValidatorLambdaRoleBasic8ED29FE6"
   ],
   "Metadata": {
    "aws:cdk:path": "RekognitionPocBasicStack/UserValidatorBasic/Resource",
    "aws:asset:path": "asset.1aed6bd14f0423ce81c16a78b571bac54f6b6674550f3418a7b34274984e9a67",
    "aws:asset:is-bundled": false,
    "aws:asset:property": "Code"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocBasicStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocBasicStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def with_id(n):\n    n['Id'] = f\"{stack_id}-{hash(json.dumps(n, sort_keys=True))}\"\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        ids = [with_id(n) for n in old.get(t, [])]\n        old_incoming_ids = [n['Id'] for n in ids]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'] in old_incoming_ids]\n    elif request_type == 'Delete':\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "RekognitionPocBasicStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/1WLwWrDMBBEvyV3eRvH/YHG0FOhJim9hrW8Tje2pKKVCEbo34vltNDTe8PMHKB+3sN+h3ep9DBVM/eQzgH1pPAulyQNpGPUEwXVjvZhG44olNWMph8QUjvajrxhEXZWveFC/pN8Ce1o/+XXaHV4FL+e1bBYNG7oIX1gP9NaFslKmguKUBB4WaEYDaST2zaFnZtZL2vcLOdSkbjoNak/Kf9zwCvb67p4j+E7hqy6JXw5+9RAfYC63t2EufLRBjYEp40/Hc0XzykBAAA="
   },
   "Metadata": {
    "aws:cdk:path": "RekognitionPocBasicStack/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "DocumentsBucketNameBasic": {
   "Description": "Bucket for identity documents",
   "Value": {
    "Ref": "DocumentsBucketBasic6A70FCE4"
   }
  },
  "UserPhotosBucketNameBasic": {
   "Description": "Bucket for user photos",
   "Value": {
    "Ref": "UserPhotosBucketBasic841BB3B6"
   }
  },
  "IndexedDocumentsTableNameBasic": {
   "Description": "DynamoDB table for indexed documents metadata",
   "Value": {
    "Ref": "IndexedDocumentsTableBasic38A69D7F"
   }
  },
  "ComparisonResultsTableNameBasic": {
   "Description": "DynamoDB table for comparison results",
   "Value": {
    "Ref": "ComparisonResultsTableBasic37BC9648"
   }
  },
  "ValidationMode": {
   "Description": "Current validation mode (HYBRID or DIRECT_COMPARE)",
   "Value": "DIRECT_COMPARE"
  },
  "DirectCompareThreshold": {
   "Description": "Threshold for direct comparison mode",
   "Value": "90.0"
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}